// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/course.dart';
import 'models/feedback.dart';
import 'models/schedule.dart';
import 'models/topic.dart';
import 'models/tutor.dart';
import 'models/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(8, 4927980483406184666),
      name: 'User',
      lastPropertyId: const IdUid(12, 3429180594167868349),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3139877220483377624),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4575222941722443256),
            name: 'avatar',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1237825480472449775),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8327922800271685358),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8224719438180687253),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4033436450237597444),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4168061853723470169),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1848401955943814650),
            name: 'languages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8680937119513322196),
            name: 'birthDay',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 713202177151594313),
            name: 'level',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5072768247890816187),
            name: 'isLogin',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 3429180594167868349),
            name: 'role',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(1, 857218537444002931),
      name: 'Course',
      lastPropertyId: const IdUid(7, 6193901175460123861),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 593744255088447313),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6572692316069200839),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1995432464229714534),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8244603716809191164),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 9012410869610915206),
            name: 'level',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8294308549207062063),
            name: 'reason',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6193901175460123861),
            name: 'purpose',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 4979576279435223876),
      name: 'Feedback',
      lastPropertyId: const IdUid(6, 5906531718321127535),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6051089410403379129),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2640497550843750658),
            name: 'authId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5387127207007416501),
            name: 'tutorId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7726433053309404450),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3776465680728430375),
            name: 'stars',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5906531718321127535),
            name: 'createAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 1203326837137048493),
      name: 'Schedule',
      lastPropertyId: const IdUid(6, 7178518745443592460),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6962243461574886772),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 657126306766690269),
            name: 'tutorId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1151753504595235109),
            name: 'studentId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 820615905479224217),
            name: 'startTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4628078883899614177),
            name: 'endTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7178518745443592460),
            name: 'isBooked',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 1140716896936033180),
      name: 'Topic',
      lastPropertyId: const IdUid(4, 8748749301403249357),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6382233066791743892),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8821310724660580116),
            name: 'nameFile',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8005775985312736300),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8748749301403249357),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 4632999306716687045),
      name: 'Tutor',
      lastPropertyId: const IdUid(21, 95278223573282372),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6918127939074160814),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 658708179921291475),
            name: 'stars',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4311338334635187074),
            name: 'isFavorite',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4389518951506038844),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5555566958581944543),
            name: 'avatar',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4788601564590954447),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2027400231689293477),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6220780602334861618),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8706542120992871432),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5756806394009685991),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8048364598356868937),
            name: 'languages',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8418801733585147025),
            name: 'birthDay',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4794489178318414762),
            name: 'level',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 4634922392105175295),
            name: 'isLogin',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 3733419244473900451),
            name: 'role',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 4382993532093544831),
            name: 'interests',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 3565999269699340280),
            name: 'experience',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 2455325060430108575),
            name: 'bio',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 8271618687918412440),
            name: 'targetStudent',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 6736326598264008231),
            name: 'videoUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 95278223573282372),
            name: 'price',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(8, 4927980483406184666),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [2115329411095386120, 3987907200154403142],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        4806859818915210022,
        5050399792396906822,
        3613988513891924403,
        8764782188829130451,
        219692325673674373,
        8620385641874367577,
        5753719627474113087,
        4637549721399713350,
        1398096531167183646,
        851537805323264942,
        1139137896691089603,
        1867843973535330888,
        1730589915831904817,
        1072154889912077681,
        4590760530722962535,
        1409892637022323035,
        9116326852689148510,
        9006103268731312291,
        5235989464845288841,
        2970696528037125701,
        4447185139659981707,
        9056289825198969648
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    User: EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final avatarOffset = fbb.writeString(object.avatar);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final countryOffset = fbb.writeString(object.country);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final languagesOffset = fbb.writeList(
              object.languages.map(fbb.writeString).toList(growable: false));
          final levelOffset = fbb.writeString(object.level);
          final roleOffset = fbb.writeString(object.role);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, avatarOffset);
          fbb.addOffset(2, passwordOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, emailOffset);
          fbb.addOffset(5, countryOffset);
          fbb.addOffset(6, phoneOffset);
          fbb.addOffset(7, languagesOffset);
          fbb.addInt64(8, object.birthDay.millisecondsSinceEpoch);
          fbb.addOffset(9, levelOffset);
          fbb.addBool(10, object.isLogin);
          fbb.addOffset(11, roleOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 18, []),
              DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 26, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Course: EntityDefinition<Course>(
        model: _entities[1],
        toOneRelations: (Course object) => [],
        toManyRelations: (Course object) => {},
        getId: (Course object) => object.id,
        setId: (Course object, int id) {
          object.id = id;
        },
        objectToFB: (Course object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final imageUrlOffset = fbb.writeString(object.imageUrl);
          final reasonOffset = fbb.writeString(object.reason);
          final purposeOffset = fbb.writeString(object.purpose);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, imageUrlOffset);
          fbb.addInt64(4, object.level);
          fbb.addOffset(5, reasonOffset);
          fbb.addOffset(6, purposeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Course(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Feedback: EntityDefinition<Feedback>(
        model: _entities[2],
        toOneRelations: (Feedback object) => [],
        toManyRelations: (Feedback object) => {},
        getId: (Feedback object) => object.id,
        setId: (Feedback object, int id) {
          object.id = id;
        },
        objectToFB: (Feedback object, fb.Builder fbb) {
          final contentOffset = fbb.writeString(object.content);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.authId);
          fbb.addInt64(2, object.tutorId);
          fbb.addOffset(3, contentOffset);
          fbb.addFloat64(4, object.stars);
          fbb.addInt64(5, object.createAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Feedback(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0),
              DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Schedule: EntityDefinition<Schedule>(
        model: _entities[3],
        toOneRelations: (Schedule object) => [],
        toManyRelations: (Schedule object) => {},
        getId: (Schedule object) => object.id,
        setId: (Schedule object, int id) {
          object.id = id;
        },
        objectToFB: (Schedule object, fb.Builder fbb) {
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.tutorId);
          fbb.addInt64(2, object.studentId);
          fbb.addInt64(3, object.startTime.millisecondsSinceEpoch);
          fbb.addInt64(4, object.endTime.millisecondsSinceEpoch);
          fbb.addBool(5, object.isBooked);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Schedule(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8),
              DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Topic: EntityDefinition<Topic>(
        model: _entities[4],
        toOneRelations: (Topic object) => [],
        toManyRelations: (Topic object) => {},
        getId: (Topic object) => object.id,
        setId: (Topic object, int id) {
          object.id = id;
        },
        objectToFB: (Topic object, fb.Builder fbb) {
          final nameFileOffset = fbb.writeString(object.nameFile);
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameFileOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Topic(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Tutor: EntityDefinition<Tutor>(
        model: _entities[5],
        toOneRelations: (Tutor object) => [],
        toManyRelations: (Tutor object) => {},
        getId: (Tutor object) => object.id,
        setId: (Tutor object, int id) {
          object.id = id;
        },
        objectToFB: (Tutor object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          final avatarOffset = fbb.writeString(object.avatar);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final countryOffset = fbb.writeString(object.country);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final languagesOffset = fbb.writeList(
              object.languages.map(fbb.writeString).toList(growable: false));
          final levelOffset = fbb.writeString(object.level);
          final roleOffset = fbb.writeString(object.role);
          final interestsOffset = fbb.writeList(
              object.interests.map(fbb.writeString).toList(growable: false));
          final experienceOffset = fbb.writeString(object.experience);
          final bioOffset = fbb.writeString(object.bio);
          final targetStudentOffset = fbb.writeString(object.targetStudent);
          final videoUrlOffset = fbb.writeString(object.videoUrl);
          fbb.startTable(22);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.stars);
          fbb.addBool(2, object.isFavorite);
          fbb.addOffset(3, descriptionOffset);
          fbb.addOffset(4, avatarOffset);
          fbb.addOffset(5, passwordOffset);
          fbb.addOffset(6, nameOffset);
          fbb.addOffset(7, emailOffset);
          fbb.addOffset(8, countryOffset);
          fbb.addOffset(9, phoneOffset);
          fbb.addOffset(10, languagesOffset);
          fbb.addInt64(11, object.birthDay.millisecondsSinceEpoch);
          fbb.addOffset(12, levelOffset);
          fbb.addBool(13, object.isLogin);
          fbb.addOffset(14, roleOffset);
          fbb.addOffset(15, interestsOffset);
          fbb.addOffset(16, experienceOffset);
          fbb.addOffset(17, bioOffset);
          fbb.addOffset(18, targetStudentOffset);
          fbb.addOffset(19, videoUrlOffset);
          fbb.addInt64(20, object.price);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Tutor(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22),
              const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGet(buffer, rootOffset, 34, []),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 36, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 38, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 40, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 42, ''),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 44, 0),
              const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGet(buffer, rootOffset, 24, []),
              DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0)),
              const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 28, ''),
              const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 32, ''),
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 10, ''),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 30, false))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[0].properties[0]);

  /// see [User.avatar]
  static final avatar = QueryStringProperty<User>(_entities[0].properties[1]);

  /// see [User.password]
  static final password = QueryStringProperty<User>(_entities[0].properties[2]);

  /// see [User.name]
  static final name = QueryStringProperty<User>(_entities[0].properties[3]);

  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[0].properties[4]);

  /// see [User.country]
  static final country = QueryStringProperty<User>(_entities[0].properties[5]);

  /// see [User.phone]
  static final phone = QueryStringProperty<User>(_entities[0].properties[6]);

  /// see [User.languages]
  static final languages =
      QueryStringVectorProperty<User>(_entities[0].properties[7]);

  /// see [User.birthDay]
  static final birthDay =
      QueryIntegerProperty<User>(_entities[0].properties[8]);

  /// see [User.level]
  static final level = QueryStringProperty<User>(_entities[0].properties[9]);

  /// see [User.isLogin]
  static final isLogin =
      QueryBooleanProperty<User>(_entities[0].properties[10]);

  /// see [User.role]
  static final role = QueryStringProperty<User>(_entities[0].properties[11]);
}

/// [Course] entity fields to define ObjectBox queries.
class Course_ {
  /// see [Course.id]
  static final id = QueryIntegerProperty<Course>(_entities[1].properties[0]);

  /// see [Course.name]
  static final name = QueryStringProperty<Course>(_entities[1].properties[1]);

  /// see [Course.description]
  static final description =
      QueryStringProperty<Course>(_entities[1].properties[2]);

  /// see [Course.imageUrl]
  static final imageUrl =
      QueryStringProperty<Course>(_entities[1].properties[3]);

  /// see [Course.level]
  static final level = QueryIntegerProperty<Course>(_entities[1].properties[4]);

  /// see [Course.reason]
  static final reason = QueryStringProperty<Course>(_entities[1].properties[5]);

  /// see [Course.purpose]
  static final purpose =
      QueryStringProperty<Course>(_entities[1].properties[6]);
}

/// [Feedback] entity fields to define ObjectBox queries.
class Feedback_ {
  /// see [Feedback.id]
  static final id = QueryIntegerProperty<Feedback>(_entities[2].properties[0]);

  /// see [Feedback.authId]
  static final authId =
      QueryIntegerProperty<Feedback>(_entities[2].properties[1]);

  /// see [Feedback.tutorId]
  static final tutorId =
      QueryIntegerProperty<Feedback>(_entities[2].properties[2]);

  /// see [Feedback.content]
  static final content =
      QueryStringProperty<Feedback>(_entities[2].properties[3]);

  /// see [Feedback.stars]
  static final stars =
      QueryDoubleProperty<Feedback>(_entities[2].properties[4]);

  /// see [Feedback.createAt]
  static final createAt =
      QueryIntegerProperty<Feedback>(_entities[2].properties[5]);
}

/// [Schedule] entity fields to define ObjectBox queries.
class Schedule_ {
  /// see [Schedule.id]
  static final id = QueryIntegerProperty<Schedule>(_entities[3].properties[0]);

  /// see [Schedule.tutorId]
  static final tutorId =
      QueryIntegerProperty<Schedule>(_entities[3].properties[1]);

  /// see [Schedule.studentId]
  static final studentId =
      QueryIntegerProperty<Schedule>(_entities[3].properties[2]);

  /// see [Schedule.startTime]
  static final startTime =
      QueryIntegerProperty<Schedule>(_entities[3].properties[3]);

  /// see [Schedule.endTime]
  static final endTime =
      QueryIntegerProperty<Schedule>(_entities[3].properties[4]);

  /// see [Schedule.isBooked]
  static final isBooked =
      QueryBooleanProperty<Schedule>(_entities[3].properties[5]);
}

/// [Topic] entity fields to define ObjectBox queries.
class Topic_ {
  /// see [Topic.id]
  static final id = QueryIntegerProperty<Topic>(_entities[4].properties[0]);

  /// see [Topic.nameFile]
  static final nameFile =
      QueryStringProperty<Topic>(_entities[4].properties[1]);

  /// see [Topic.name]
  static final name = QueryStringProperty<Topic>(_entities[4].properties[2]);

  /// see [Topic.description]
  static final description =
      QueryStringProperty<Topic>(_entities[4].properties[3]);
}

/// [Tutor] entity fields to define ObjectBox queries.
class Tutor_ {
  /// see [Tutor.id]
  static final id = QueryIntegerProperty<Tutor>(_entities[5].properties[0]);

  /// see [Tutor.stars]
  static final stars = QueryDoubleProperty<Tutor>(_entities[5].properties[1]);

  /// see [Tutor.isFavorite]
  static final isFavorite =
      QueryBooleanProperty<Tutor>(_entities[5].properties[2]);

  /// see [Tutor.description]
  static final description =
      QueryStringProperty<Tutor>(_entities[5].properties[3]);

  /// see [Tutor.avatar]
  static final avatar = QueryStringProperty<Tutor>(_entities[5].properties[4]);

  /// see [Tutor.password]
  static final password =
      QueryStringProperty<Tutor>(_entities[5].properties[5]);

  /// see [Tutor.name]
  static final name = QueryStringProperty<Tutor>(_entities[5].properties[6]);

  /// see [Tutor.email]
  static final email = QueryStringProperty<Tutor>(_entities[5].properties[7]);

  /// see [Tutor.country]
  static final country = QueryStringProperty<Tutor>(_entities[5].properties[8]);

  /// see [Tutor.phone]
  static final phone = QueryStringProperty<Tutor>(_entities[5].properties[9]);

  /// see [Tutor.languages]
  static final languages =
      QueryStringVectorProperty<Tutor>(_entities[5].properties[10]);

  /// see [Tutor.birthDay]
  static final birthDay =
      QueryIntegerProperty<Tutor>(_entities[5].properties[11]);

  /// see [Tutor.level]
  static final level = QueryStringProperty<Tutor>(_entities[5].properties[12]);

  /// see [Tutor.isLogin]
  static final isLogin =
      QueryBooleanProperty<Tutor>(_entities[5].properties[13]);

  /// see [Tutor.role]
  static final role = QueryStringProperty<Tutor>(_entities[5].properties[14]);

  /// see [Tutor.interests]
  static final interests =
      QueryStringVectorProperty<Tutor>(_entities[5].properties[15]);

  /// see [Tutor.experience]
  static final experience =
      QueryStringProperty<Tutor>(_entities[5].properties[16]);

  /// see [Tutor.bio]
  static final bio = QueryStringProperty<Tutor>(_entities[5].properties[17]);

  /// see [Tutor.targetStudent]
  static final targetStudent =
      QueryStringProperty<Tutor>(_entities[5].properties[18]);

  /// see [Tutor.videoUrl]
  static final videoUrl =
      QueryStringProperty<Tutor>(_entities[5].properties[19]);

  /// see [Tutor.price]
  static final price = QueryIntegerProperty<Tutor>(_entities[5].properties[20]);
}
